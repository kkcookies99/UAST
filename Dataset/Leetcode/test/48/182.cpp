class Solution {
public:
    void XXX(vector<vector<int>>& v) {
//n表示容器大小，n2用于判断循环次数
	int n = v.size();
	int n2 = n;

	int a1,a2,a4;
	a1 = a2 = a4 = 0;
	a2 = n - 1;
	a4 = 1;

	//判断容器是否全部循环完成
	//如若n2=3，容器为3X3，n2/2 = 1；只需要循环一次
	//如若n2=4，容器为4X4，n2/2 = 2；则需要循环两次（外圈一次，内圈一次）
	while (n2/2 != 0)
	{
		//a1：循环的起点，第一次循环是0 到 n-1，起点为0、即a1=0；第二次循环是1 到 n-2，起点是1、即a1=1；
		//a2：循环的终点，第一次循环是0 到 n-1，终点为n-1、即a2=n-1；第二次循环是1 到 n-2，终点是n-2、即a2=n-2；
		//a4：循环终点的减值：第一次循环终点为n-1，减值为1、即a4=1；第一次循环终点为n-2，减值为2、即a4=2；

		//外圈循环，把外圈的值全部旋转90度
		for (int j= a2,i = a1 ; i < n - a4 && j > 0; i++, j--)
		{
			//把容器最后一列数据，存放在临时变量b中
			int b = v[i][n - a4];

			//把第一行的数据，赋值给，最后一列
			v[i][n - a4] = v[a1][i];

			//把第一列的数据，赋值给，第一行
			v[a1][i] = v[j][a1];

			//把最后一行的数据，赋值给，第一列
			v[j][a1] = v[n - a4][j];

			//把b的数据（之前最后列的数据），赋值给，最后一行
			v[n - a4][j] = b;


		}

		//外循环一圈后进行判断
		//若还有内圈，则所有参数整体向内调整
		//调整完后，把内圈当成外圈，继续旋转
		if (n / 2 != 0)
		{
			n2 = n2 - 2;
			a1 = a1 + 1;
			a2 = a2 - 1;
			a4 = a4 + 1;
		}
	}
    }
};

